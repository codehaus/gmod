                                    ------
                                    GET Examples
                                    ------
                                    ------
                                    ------

Simplified GET Request

 HTTPBuilder has convenience methods for <<<GET>>> and <<<{{{post.html}POST}}>>>
 methods.  Here is a simple HTTP <<<GET>>> which parses the response as a DOM 
 object:
 
------------------------
def http = new HTTPBuilder('http://www.google.com')

def html = http.get( path : '/search', query : [q:'Groovy'] )

assert html instanceof GPathResult
assert html.HEAD.size() == 1
assert html.BODY.size() == 1
------------------------

 In the above example, we are making a request, and automatically parsing the 
 HTML response based on the response's content-type header.  The HTML stream is 
 normalized (thanks to {{{http://nekohtml.sourceforge.net/}Neko,}}) and then 
 parsed by an
 {{{http://groovy.codehaus.org/Reading+XML+using+Groovy%27s+XmlSlurper}XmlSlurper}}
 for easy DOM parsing.  
 
 We are also taking advantage of HTTPBuilder's 
 {{{../apidocs/groovyx/net/http/HTTPBuilder.html#defaultSuccessHandler(org.apache.http.HttpResponse,%20java.lang.Object)}default
 success handler}} since we're not supplying a 'success' response handler 
 closure.  The default handler defined by HTTPBuilder (which can be overridden)
 simply returns the parsed response data. 
 
 Next is another <<<GET>>> request, with custom response-handling logic that 
 prints the response to <<<System.out>>>:
 
------------------------
def http = new HTTPBuilder('http://www.google.com')

http.get( path : '/search', 
          contentType : TEXT,
          query : [q:'Groovy'] ) { resp, reader ->
          
  println "response status: ${resp.statusLine}"
  println 'Response data: -----'
  System.out << reader
  println '\n--------------------'
}
------------------------

 In this version, the <<<get()}>>> method also accepts a closure, which is 
 interpreted as the 'success' response handler.  A failure response (i.e. status 
 code of 400 or greater) is still handled by the builder's 
 {{{../apidocs/groovyx/net/http/HTTPBuilder.html#defaultFailureHandler(org.apache.http.HttpResponse)}
 default failure handler}}.
 
 Additionally, we are telling HTTPBuilder to parse the response as 
 <<<ContentType.TEXT>>> - which is a built-in type, handled by the default   
 <<<{{{../apidocs/groovyx/net/http/ParserRegistry.html#parseText(org.apache.http.HttpResponse)}
 ParserRegistry}}>>> to automatically create a <<<Reader>>> from the response data.
